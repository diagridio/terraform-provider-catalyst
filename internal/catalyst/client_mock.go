// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_mock.go -package catalyst -write_generate_directive
//

// Package catalyst is a generated GoMock package.
package catalyst

import (
	context "context"
	reflect "reflect"

	client "github.com/diagridio/diagrid-cloud-go/pkg/cloudruntime/client"
	client0 "github.com/diagridio/diagrid-cloud-go/pkg/conductor/client"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -source client.go -destination client_mock.go -package catalyst -write_generate_directive

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockClient) CreateProject(ctx context.Context, project *client.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockClientMockRecorder) CreateProject(ctx, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockClient)(nil).CreateProject), ctx, project)
}

// CreateRegion mocks base method.
func (m *MockClient) CreateRegion(ctx context.Context, region *client.Region) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegion", ctx, region)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegion indicates an expected call of CreateRegion.
func (mr *MockClientMockRecorder) CreateRegion(ctx, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegion", reflect.TypeOf((*MockClient)(nil).CreateRegion), ctx, region)
}

// DeleteProject mocks base method.
func (m *MockClient) DeleteProject(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockClientMockRecorder) DeleteProject(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockClient)(nil).DeleteProject), ctx, id)
}

// DeleteRegion mocks base method.
func (m *MockClient) DeleteRegion(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegion", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRegion indicates an expected call of DeleteRegion.
func (mr *MockClientMockRecorder) DeleteRegion(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegion", reflect.TypeOf((*MockClient)(nil).DeleteRegion), ctx, name)
}

// GetProject mocks base method.
func (m *MockClient) GetProject(ctx context.Context, id string, qp *client.DescribeProjectParams) (*client.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", ctx, id, qp)
	ret0, _ := ret[0].(*client.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockClientMockRecorder) GetProject(ctx, id, qp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockClient)(nil).GetProject), ctx, id, qp)
}

// GetRegion mocks base method.
func (m *MockClient) GetRegion(ctx context.Context, name string) (*client.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion", ctx, name)
	ret0, _ := ret[0].(*client.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockClientMockRecorder) GetRegion(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockClient)(nil).GetRegion), ctx, name)
}

// GetUserOrg mocks base method.
func (m *MockClient) GetUserOrg(arg0 context.Context) (*client0.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrg", arg0)
	ret0, _ := ret[0].(*client0.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrg indicates an expected call of GetUserOrg.
func (mr *MockClientMockRecorder) GetUserOrg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrg", reflect.TypeOf((*MockClient)(nil).GetUserOrg), arg0)
}

// UpdateProject mocks base method.
func (m *MockClient) UpdateProject(ctx context.Context, prj *client.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", ctx, prj)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockClientMockRecorder) UpdateProject(ctx, prj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockClient)(nil).UpdateProject), ctx, prj)
}

// UpdateRegion mocks base method.
func (m *MockClient) UpdateRegion(ctx context.Context, region *client.Region) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegion", ctx, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRegion indicates an expected call of UpdateRegion.
func (mr *MockClientMockRecorder) UpdateRegion(ctx, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegion", reflect.TypeOf((*MockClient)(nil).UpdateRegion), ctx, region)
}

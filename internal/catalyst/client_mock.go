// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination client_mock.go -package catalyst
//

// Package catalyst is a generated GoMock package.
package catalyst

import (
	context "context"
	reflect "reflect"

	client "github.com/diagridio/diagrid-cloud-go/pkg/client"
	client0 "github.com/diagridio/diagrid-cloud-go/pkg/cloudruntime/client"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockClient) CreateProject(ctx context.Context, project *client0.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, project)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockClientMockRecorder) CreateProject(ctx, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockClient)(nil).CreateProject), ctx, project)
}

// DeleteProject mocks base method.
func (m *MockClient) DeleteProject(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockClientMockRecorder) DeleteProject(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockClient)(nil).DeleteProject), ctx, id)
}

// GetProject mocks base method.
func (m *MockClient) GetProject(ctx context.Context, id string, qp *client0.DescribeProjectParams) (*client0.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", ctx, id, qp)
	ret0, _ := ret[0].(*client0.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockClientMockRecorder) GetProject(ctx, id, qp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockClient)(nil).GetProject), ctx, id, qp)
}

// GetUserOrg mocks base method.
func (m *MockClient) GetUserOrg(arg0 context.Context) (*client.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrg", arg0)
	ret0, _ := ret[0].(*client.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrg indicates an expected call of GetUserOrg.
func (mr *MockClientMockRecorder) GetUserOrg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrg", reflect.TypeOf((*MockClient)(nil).GetUserOrg), arg0)
}

// ListRegions mocks base method.
func (m *MockClient) ListRegions(arg0 context.Context) (*[]client0.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegions", arg0)
	ret0, _ := ret[0].(*[]client0.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegions indicates an expected call of ListRegions.
func (mr *MockClientMockRecorder) ListRegions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegions", reflect.TypeOf((*MockClient)(nil).ListRegions), arg0)
}

// PatchProject mocks base method.
func (m *MockClient) PatchProject(ctx context.Context, prj *client0.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchProject", ctx, prj)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchProject indicates an expected call of PatchProject.
func (mr *MockClientMockRecorder) PatchProject(ctx, prj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchProject", reflect.TypeOf((*MockClient)(nil).PatchProject), ctx, prj)
}
